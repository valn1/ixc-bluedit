import React, {useContext, useEffect, useRef, useState} from "react";
import {
    ImageView,
    PublicationsContainer,
    UpsideContainer,
    UserImageProfile,
    UserNameText,
    ViewHeaderOptions
} from "./styles"
import {HeaderButtons} from "./HeaderButtons";
import {
    FlatList,
    ListRenderItem,
    View,
    Animated, ActivityIndicator
} from "react-native";
import {AppContext} from "../../App";
import {CommentBody} from "../Post/CommentBody";
import {Post} from "../Post";
// @ts-ignore
import CryptoJS from "rn-crypto-js"
import {ExcludeOption} from "./ExcludeOption";
import AsyncStorage from "@react-native-async-storage/async-storage";
import {PostsInProfile} from "./interface";
import {AllConfigOptions} from "./AllConfigOptions";
import AnimatedInterpolation = Animated.AnimatedInterpolation;

const UserPublication: React.FC<PostsInProfile> = ({postagens, comentario}) => {
    const [posts, setPosts] = useState(true)
    const [commnts, setComments] = useState(false)
    const [albums, setAlbums] = useState(false)
    const [userName, setUserName] = useState('');
    const [userPhoto, setUserPhoto] = useState('');
    const {state} = useContext(AppContext)

    useEffect(() => {
        const storeData = async () => {
            const name = await AsyncStorage.getItem("UserName");
            setUserName(name as string)
            const photo = await AsyncStorage.getItem("UserPhoto");
            setUserPhoto(photo as string)

        }
        storeData();
    }, [state.update])

    const hash = CryptoJS.MD5("alexandrebeilner10@gmail.com").toString();

    const IsLoading = () => {
        return (
            <View style={{flex: 1, alignItems: "center", justifyContent: "center"}}>
                <ActivityIndicator color={"#e6a600"} size={"large"}></ActivityIndicator>
            </View>
        )
    }
    const renderComentarios: ListRenderItem<any> | null | undefined = ({item, index}) => {
        return (
            <>
                <CommentBody
                    email={item.email}
                    body={item.body}
                    id={index}/>
            </>
        )
    }

    const renderPublicacao: ListRenderItem<any> | null | undefined = ({item, index}) => {
        if (item.url.length === 0) {
            return (
                <>
                    <Post
                        pressable={false}
                        hideComments={true}
                        post={{title: item.title, body: item.body, id: index, userId: index}}
                        userData={{userId: index, userName: userName ? userName : "Xandão", userMail: item.email}}
                    />
                    <ExcludeOption id={item.id}></ExcludeOption>
                </>
            )
        } else {
            return null
        }
    }
    const renderAlbum: ListRenderItem<any> | null | undefined = ({item, index}) => {
        const photosMap = item.url.map((url: any, index: number) => {
            return {
                albumId: index,
                id: index,
                thumbnailUrl: "N/A",
                title: item.body,
                url: url
            }
        })
        const albumData = {
            AlbumData: {
                id: index,
                photos: photosMap,
                title: item.title,
                userId: index,
            }
        }
        if (item.url.length >= 1) {
            return (
                <>
                    <Post
                        pressable={false}
                        hideComments={true}
                        album={albumData}
                        userData={{userId: index, userName: userName ? userName : "Xandão", userMail: item.email}}
                    ></Post>
                    <ExcludeOption id={item.id}></ExcludeOption>
                </>
            )
        } else {
            return null
        }
    }

    const H_MAX_HEIGHT = 375;


    const scrollOffsetY = useRef(new Animated.Value(0)).current;
    const dinamicSize = (max: number, min: number, distance: number):AnimatedInterpolation<number | string> => {
        return scrollOffsetY.interpolate({
            inputRange: [0, distance],
            outputRange: [max, min],
            extrapolate: "clamp"
        })
    }
    const PostCommentAlbum = (data: any, renderItem: any) => {
        return (
            <FlatList
                data={data}
                renderItem={renderItem}
                keyExtractor={(item, index) => `${index}`}
                onScroll={Animated.event([
                    {nativeEvent: {contentOffset: {y: scrollOffsetY}}},
                ], {useNativeDriver: false})}
                scrollEventThrottle={16}
                contentContainerStyle={{paddingTop: H_MAX_HEIGHT}}
            />
        )
    }

    const changeVisiblePost = (post: boolean, album: boolean, comment: boolean): void => {
        setPosts(post)
        setAlbums(album)
        setComments(comment)
    }

    return (
        <View style={{flex: 1}}>
            <UpsideContainer style={{height: dinamicSize(375, 190, 200)}}>
                <View style={{flexDirection: "row", justifyContent: "space-between", flex: 1, marginTop: 15}}>
                    <View style={{justifyContent: "center"}}>
                            <ImageView
                                style={{
                                    height: dinamicSize(140, 70, 230),
                                    width: dinamicSize(140, 70, 230)
                                }}>
                                <UserImageProfile
                                    source={{uri: userPhoto ? userPhoto : `https://www.gravatar.com/avatar/${hash}`}}
                                    resizeMode={"cover"}/>
                            </ImageView>
                            <UserNameText
                                style={{fontSize: dinamicSize(30, 15, 150)}}>{userName ? userName : "Xandão"}</UserNameText>
                    </View>
                    <AllConfigOptions></AllConfigOptions>
                </View>
                <ViewHeaderOptions>
                    <HeaderButtons
                        onPress={() => changeVisiblePost(true, false, false)}
                        name={"Publicações"}
                        color={posts}/>
                    <HeaderButtons
                        onPress={() => changeVisiblePost(false, false, true)}
                        name={"Comentários"}
                        color={commnts}/>
                    <HeaderButtons
                        onPress={() => changeVisiblePost(false, true, false)}
                        name={"Álbums"}
                        color={albums}/>
                </ViewHeaderOptions>
            </UpsideContainer>
            {postagens.length === 0
                ? <IsLoading></IsLoading>
                : <PublicationsContainer>
                    {posts && PostCommentAlbum(postagens, renderPublicacao)}
                    {commnts && PostCommentAlbum(comentario, renderComentarios)}
                    {albums && PostCommentAlbum(postagens, renderAlbum)}
                </PublicationsContainer>
            }
        </View>
    )
}

export {UserPublication}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import React, {useContext, useEffect, useState} from "react";
import {ViewHeaderOptions} from "./styles"
import {HeaderButtons} from "./HeaderButtons";
import {ActivityIndicator, Dimensions, ListRenderItem, View} from "react-native";
import {AppContext} from "../../App";
import {CommentBody} from "../Post/CommentBody";
import {Post} from "../Post";
// @ts-ignore
import CryptoJS from "rn-crypto-js"
import {ExcludeOption} from "./ExcludeOption";
import AsyncStorage from "@react-native-async-storage/async-storage";
import {PostsInProfile} from "./interface";
import {HeaderProfile} from "./HeaderProfile";
import Animated, {
    Extrapolation,
    interpolate,
    useAnimatedScrollHandler,
    useAnimatedStyle,
    useSharedValue,
    withTiming,
} from "react-native-reanimated";
import {PublicationsContainer} from "./stylesAnimated";
import {SkeletonProfile} from "../Skeleton/SkeletonProfile";

const UserPublication: React.FC<PostsInProfile> = ({postagens, comentario, haveData}) => {
    const [posts, setPosts] = useState(true)
    const [commnts, setComments] = useState(false)
    const [albums, setAlbums] = useState(false)
    const [userName, setUserName] = useState('');
    const [userPhoto, setUserPhoto] = useState('');
    const {state} = useContext(AppContext)

    useEffect(() => {
        const storeData = async () => {
            const name = await AsyncStorage.getItem("UserName");
            setUserName(name as string)
            const photo = await AsyncStorage.getItem("UserPhoto");
            setUserPhoto(photo as string)

        }
        storeData();
    }, [state.update])


    const IsLoading = () => {
        return (
            <View style={{flex: 1, alignItems: "center", justifyContent: "center"}}>
                <ActivityIndicator color={"#e6a600"} size={"large"}></ActivityIndicator>
            </View>
        )
    }
    const renderComentarios: ListRenderItem<any> | null | undefined = ({item, index}) => {
        return (
            <>
                <CommentBody
                    email={item.email}
                    body={item.body}
                    id={index}/>
            </>
        )
    }

    const renderPublicacao: ListRenderItem<any> | null | undefined = ({item, index}) => {
        if (item.url.length === 0) {
            return (
                <>
                    <Post
                        pressable={false}
                        hideComments={true}
                        post={{title: item.title, body: item.body, id: index, userId: index}}
                        userData={{userId: index, userName: userName ? userName : "Xandão", userMail: item.email}}
                    />
                    <ExcludeOption id={item.id}></ExcludeOption>
                </>
            )
        } else {
            return null
        }
    }
    const renderAlbum: ListRenderItem<any> | null | undefined = ({item, index}) => {
        const photosMap = item.url.map((url: any, index: number) => {
            return {
                albumId: index,
                id: index,
                thumbnailUrl: "N/A",
                title: item.body,
                url: url
            }
        })
        const albumData = {
            AlbumData: {
                id: index,
                photos: photosMap,
                title: item.title,
                userId: index,
            }
        }
        if (item.url.length >= 1) {
            return (
                <>
                    <Post
                        pressable={false}
                        hideComments={true}
                        album={albumData}
                        userData={{userId: index, userName: userName ? userName : "Xandão", userMail: item.email}}
                    ></Post>
                    <ExcludeOption id={item.id}></ExcludeOption>
                </>
            )
        } else {
            return null
        }
    }

    const translateY = useSharedValue(0)
    const scrollHandler = useAnimatedScrollHandler((event, context) => {
        translateY.value = event.contentOffset.y
    })

    const PostCommentAlbum = (data: any, renderItem: any) => {
        return (
            <Animated.FlatList
                showsVerticalScrollIndicator={false}
                data={data}
                renderItem={renderItem}
                keyExtractor={(item, index) => `${index}`}
                onScroll={scrollHandler}
            />
        )
    }

    const changeVisiblePost = (post: boolean, album: boolean, comment: boolean): void => {
        translateY.value = withTiming(0, {duration: 500});
        setPosts(post)
        setAlbums(album)
        setComments(comment)
    }
    const {height, width} = Dimensions.get("window")
    const rStyleContainer = useAnimatedStyle(() => {
        const heightContainer = interpolate(
            translateY.value,
            [0, height*0.3],
            [height*0.58, height*0.82],
            Extrapolation.CLAMP)
        return{
            height: heightContainer
        }
    })

    return (
        <View style={{flex: 1}}>
            {!haveData
                ? <SkeletonProfile></SkeletonProfile>
                : <>
                    <HeaderProfile userName={userName} userPhoto={userPhoto} translateY={translateY}/>
                    <PublicationsContainer style={rStyleContainer}>
                        <ViewHeaderOptions>
                            <HeaderButtons
                                onPress={() => changeVisiblePost(true, false, false)}
                                name={"Publicações"}
                                color={posts}/>
                            <HeaderButtons
                                onPress={() => changeVisiblePost(false, false, true)}
                                name={"Comentários"}
                                color={commnts}/>
                            <HeaderButtons
                                onPress={() => changeVisiblePost(false, true, false)}
                                name={"Álbums"}
                                color={albums}/>
                        </ViewHeaderOptions>
                        {posts && PostCommentAlbum(postagens, renderPublicacao)}
                        {commnts && PostCommentAlbum(comentario, renderComentarios)}
                        {albums && PostCommentAlbum(postagens, renderAlbum)}
                    </PublicationsContainer>
                </>
            }
        </View>
    )
}

export {UserPublication}

import React from "react";
import {Dimensions} from "react-native";
import {AllConfigOptions} from "./AllConfigOptions";
// @ts-ignore
import CryptoJS from "rn-crypto-js"
import {HeaderProps} from "./interface";
import {HeaderContainer, ImageView, UserImageProfile, UserNameText} from "./stylesAnimated";
import Animated, {Extrapolation, interpolate, useAnimatedStyle} from "react-native-reanimated";

const HeaderProfile: React.FC<HeaderProps> = ({userPhoto, userName, translateY}) => {

    const hash = CryptoJS.MD5("alexandrebeilner10@gmail.com").toString();
    const heigthProfile = Dimensions.get("window").height * 0.35

    const rStyleContainer = useAnimatedStyle(() => {
        const height = interpolate(
            translateY.value,
            [0, heigthProfile],//aqui é como se fosse uma função afim f(x) = ax por exemplo
            [heigthProfile, heigthProfile/3],//onde meu x sera os valores do input e o resultado o output
            Extrapolation.CLAMP
        )
        return{
            height
        }
    })

    const rStyleImage = useAnimatedStyle(() => {
        const scale = interpolate(
            translateY.value,
            [0, heigthProfile],
            [1, 0.50],
            Extrapolation.CLAMP
            )
        return{
            transform: [{scale}],
            marginTop: 20
        }
    })
    const rStyleName = useAnimatedStyle(() => {
        const fontSize = interpolate(
            translateY.value,
            [0, heigthProfile/2],
            [30, 0],
            Extrapolation.CLAMP
            )
        return{
            fontSize
        }
    })

    return(
        <HeaderContainer style={rStyleContainer}>
            <Animated.View style={{justifyContent: "center"}}>
                <ImageView style={rStyleImage}>
                    <UserImageProfile
                        source={{uri: userPhoto ? userPhoto : `https://www.gravatar.com/avatar/${hash}`}}
                        resizeMode={"cover"}/>
                </ImageView>
                <UserNameText>{userName ? userName : "Xandão"}</UserNameText>
            </Animated.View>
            <AllConfigOptions></AllConfigOptions>
        </HeaderContainer>
    )
}

export {HeaderProfile}


import styled from "styled-components/native";
import {Dimensions} from "react-native";
import Animated from "react-native-reanimated";

export const HeaderContainer = styled(Animated.View)`
  flex-direction: row;
  justify-content: space-between;
  flex: 1;
`;

export const ImageView = styled(Animated.View)`
  border: 5px #fff;
  border-radius: 10px;
  margin-left: 25px;
  width: 140px;
  height: 140px;
  margin-top: 10px;
`;

export const UserImageProfile = styled(Animated.Image)`
  flex: 1
`;

export const UserNameText = styled(Animated.Text)`
  color: ${props => props.theme.colors.text};
  margin-left: 30px;
  font-size: 30px;
`;

export const PublicationsContainer = styled(Animated.View)`
  border-width: 3px;
  height: ${Dimensions.get("window").height * 0.50}px;
  border-top-color: ${props => props.theme.colors.backgound};
  border-right-color: ${props => props.theme.colors.border};
  border-left-color: ${props => props.theme.colors.border};
  border-bottom-color: ${props => props.theme.colors.backgound};
`;


